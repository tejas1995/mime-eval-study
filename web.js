(()=>{"use strict";let t="https://tejassrinivasan.pythonanywhere.com/";var o=[];let i=-1,e=null,n=0,s=0;function l(t){n+=t,0==n?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),0==n?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),1==n&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),d()),$("#main_box_instructions").children(":not(input)").each(((t,o)=>{$(o).hide()})),$(`#instructions_${n}`).show()}$("#button_instructions_next").on("click",(()=>l(1))),$("#button_instructions_prev").on("click",(()=>l(-1)));const a=document.getElementById("mime_video");a?a.addEventListener("ended",(()=>{console.log("The user has watched the full video."),$("#watchvideo_instruction").hide(),$("#user_prediction").val(""),$("#answer_box").show()})):console.error('Video element with ID "mime_video" not found.'),$("#answer_box").on("keyup",(()=>{""!=String($("#user_prediction").val()).trim()?$("#button_next").show():(console.log("The text box is empty."),$("#button_next").hide())})),$("#button_next").on("click",(()=>{if(-1!=i){let o={question_i:i,user_answer:$("#user_prediction").val()};o.question=e,o.count_exited_page=s,async function(o){o.url_data=globalThis.url_data,console.log("Data"),"study_id"in o.url_data||(o.url_data.study_id="demo_study"),"prolific_id"in o.url_data||(o.url_data.prolific_id="demo_user"),"session_id"in o.url_data||(o.url_data.session_id="demo_session"),o.url_data.queue_id=globalThis.uid,console.log("logged",o),console.log("Logging to",t+"log");try{let i=await $.ajax(t+"log",{data:JSON.stringify({project:"mime-eval-study/"+o.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+o.url_data.prolific_id,payload:JSON.stringify(o)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((t=>setTimeout(t,2e3)))}(),i}catch(t){console.log(t)}}(o),s=0}d()}));let r=null;function d(){if(r&&(clearInterval(r),r=null),i+=1,i>=o.length)return $("#main_box_experiment").hide(),$("#reward_box").show(),void $("#main_box_end").show();e=o[i],console.log(e);let t=document.getElementById("mime_video");t&&t.setAttribute("src",e.video_url),$("#mime_video").show(),$("#watchvideo_instruction").show(),$("#answer_box").hide(),$("#button_next").hide(),$("#button_quit").hide(),$("#progress").text(`Progress: ${i+1} / ${o.length}`)}document.onvisibilitychange=()=>{document.hidden?(console.log("Window lost focus."),null!==r&&(clearInterval(r),r=null)):console.log("Window regained focus.")};const u=new URLSearchParams(window.location.search),_=u.get("start"),c=u.get("uid");if(globalThis.url_data=function(t){const o={};for(const[i,e]of t)o[i]=e;return o}(u.entries()),null==globalThis.url_data.study_id&&(globalThis.url_data.study_id="demo_study"),null==globalThis.url_data.prolific_id&&(globalThis.url_data.prolific_id="demo_user"),null==globalThis.url_data.session_id&&(globalThis.url_data.session_id="demo_session"),null!=c){if(globalThis.uid=c,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${u.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.url_data.session_id.startsWith("demo"),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{o=t,null!=_&&(i=parseInt(_)-1,console.log("Starting from",i)),l(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let h=!1;document.onvisibilitychange=()=>{h||(s+=1,h=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),h=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,