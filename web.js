(()=>{"use strict";let o="https://tejassrinivasan.pythonanywhere.com/";var t=[];let n=-1,i=null,e=-1,a=!1,l=0,s=0;function r(o){l+=o,0==l?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),0==l?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),1==l&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),_()),$("#main_box_instructions").children(":not(input)").each(((o,t)=>{$(t).hide()})),$(`#instructions_${l}`).show()}$("#button_instructions_next").on("click",(()=>r(1))),$("#button_instructions_prev").on("click",(()=>r(-1)));const u=document.getElementById("mime_video");function c(o){e=o,$(`#button_option${o}`).attr("activedecision","true"),a=e==i.label_idx+1,$("#button_next").show()}u?u.addEventListener("ended",(()=>{console.log("The user has watched the full video."),$("#watchvideo_instruction").hide(),$("#answer_box").show()})):console.error('Video element with ID "mime_video" not found.'),$("#answer_box").on("keyup",(()=>{""!=String($("#user_prediction").val()).trim()?$("#button_submit").show():(console.log("The text box is empty."),$("#button_submit").hide())})),$("#button_submit").on("click",(()=>{$("#button_submit").hide(),$("#mcq_box").show(),$("#user_prediction").attr("disabled","true")})),$("#button_option1").on("click",(()=>c(1))),$("#button_option2").on("click",(()=>c(2))),$("#button_option3").on("click",(()=>c(3))),$("#button_option4").on("click",(()=>c(4))),$("#button_next").on("click",(()=>{if(-1!=n){let t={question_i:n,sample_id:i.sample_id,user_answer:$("#user_prediction").val(),user_mcq_selection:e,user_is_correct:a};t.question=i,t.count_exited_page=s,async function(t){t.url_data=globalThis.url_data,console.log("Data"),"study_id"in t.url_data||(t.url_data.study_id="demo_study"),"prolific_id"in t.url_data||(t.url_data.prolific_id="demo_user"),"session_id"in t.url_data||(t.url_data.session_id="demo_session"),t.url_data.queue_id=globalThis.uid,console.log("logged",t),console.log("Logging to",o+"log");try{let n=await $.ajax(o+"log",{data:JSON.stringify({project:"mime-eval-study/human-eval/",uid:globalThis.uid+"_"+globalThis.annotator,payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((o=>setTimeout(o,2e3)))}(),n}catch(o){console.log(o)}}(t),s=0}_()}));let d=null;function _(){if(d&&(clearInterval(d),d=null),n+=1,n>=t.length)return $("#main_box_experiment").hide(),$("#reward_box").show(),void $("#main_box_end").show();i=t[n],console.log(i);let o=document.getElementById("mime_video");o&&o.setAttribute("src",i.s3_url),$("#user_prediction").removeAttr("disabled"),console.log(i.sample_id),console.log(i.s3_url),$("#user_prediction").val(""),$("#option1_span").html(i.options[0]),$("#option2_span").html(i.options[1]),$("#option3_span").html(i.options[2]),$("#option4_span").html(i.options[3]),$("#mime_video").show(),$("#watchvideo_instruction").show(),$("#answer_box").hide();for(let o=1;o<=4;o++)$(`#button_option${o}`).removeAttr("activedecision"),$(`#button_option${o}`).removeAttr("disabled");$("#mcq_box").hide(),$("#button_next").hide(),$("#button_submit").hide(),$("#button_quit").hide(),$("#progress").text(`Progress: ${n+1} / ${t.length}`)}document.onvisibilitychange=()=>{document.hidden?(console.log("Window lost focus."),null!==d&&(clearInterval(d),d=null)):console.log("Window regained focus.")};const g=new URLSearchParams(window.location.search),b=g.get("start");g.get("uid"),globalThis.url_data=function(o){const t={};for(const[n,i]of o)t[n]=i;return t}(g.entries()),globalThis.avatar=g.get("avatar"),null==globalThis.avatar&&(globalThis.avatar="man"),globalThis.angle=g.get("angle"),null==globalThis.angle&&(globalThis.angle="0"),globalThis.background=g.get("background"),null==globalThis.background&&(globalThis.background="blank"),globalThis.annotator=g.get("annotator"),null==globalThis.annotator&&(globalThis.annotator="none"),globalThis.set=g.get("set"),null==globalThis.set&&(globalThis.set="1"),globalThis.uid=`${globalThis.avatar}_avatar-${globalThis.angle}_angle-${globalThis.background}_background-set${globalThis.set}`,console.log("Running with annotator",globalThis.annotator),console.log("Running with avatar",globalThis.avatar),console.log("Running with angle",globalThis.angle),console.log("Running with background",globalThis.background),async function(){return await $.getJSON(`baked_queues/${globalThis.avatar}_avatar-${globalThis.angle}_angle-${globalThis.background}_background-set${globalThis.set}.json?t=${Date.now()}`)}().catch((o=>{console.log("Invalid params: ",globalThis.url_data),window.location.reload()})).then((o=>{t=o,null!=b&&(n=parseInt(b)-1,console.log("Starting from",n)),r(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with annotator:",globalThis.annotator)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,